{"version":3,"file":"ngx-masonry-gallery-lib.umd.js.map","sources":["ng://ngx-masonry-gallery-lib/lib/utilities.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery.component.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery.module.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery-models.ts"],"sourcesContent":["export class Utilities {\r\n    newGuid() {\r\n       return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n           // tslint:disable-next-line:no-bitwise triple-equals\r\n           const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n           return v.toString(16);\r\n       });\r\n   }\r\n}\r\n\r\nexport let utilities = new Utilities();\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnDestroy, Output, Renderer2 } from '@angular/core';\r\nimport * as masonry from 'masonry-layout';\r\n\r\nimport { MasonryGalleryImage } from './masonry-gallery-models';\r\nimport { utilities } from './utilities';\r\n\r\n@Component({\r\n    selector: 'ngx-masonry-gallery',\r\n    template: '<div [id]=\"galleryGuid\"></div>',\r\n    styles: ['.hidden { display: none; }']\r\n})\r\nexport class MasonryGalleryComponent implements AfterViewInit, OnDestroy, OnChanges {\r\n\r\n    @Input() images: MasonryGalleryImage[] = [];\r\n    @Input() columnWidth: number = 330;\r\n    @Input() gutter: number = 5;\r\n    @Input() imageClasses: string[] = [];\r\n\r\n    @Output() clickImage = new EventEmitter<MasonryGalleryImage>();\r\n\r\n    /**\r\n     * Unique gallery guid used for distinguishing between multiple galleries on page\r\n     */\r\n    public readonly galleryGuid: string = utilities.newGuid();\r\n    private readonly mansonryItemSelectorClass = 'grid-item';\r\n    private readonly hiddenClass: string = 'hidden';\r\n\r\n    private msnry?: any;\r\n    private grid?: any;\r\n\r\n    private viewReady: boolean = false;\r\n\r\n    constructor(\r\n        private renderer: Renderer2\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        if (this.viewReady) {\r\n            this.initMasonry();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.msnry) {\r\n            this.msnry.destroy();\r\n        }\r\n    }\r\n\r\n    handleClick(image: MasonryGalleryImage): void {\r\n        this.clickImage.next(image);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewReady = true;\r\n        this.initMasonry();\r\n    }\r\n\r\n    private initMasonry(): void {\r\n        this.grid = document.getElementById(this.galleryGuid);\r\n\r\n        if (!this.grid) {\r\n            throw Error(`Could not init mansory due to non existing elem with id '${this.galleryGuid}'`);\r\n        }\r\n\r\n        this.msnry = new masonry(this.grid, {\r\n            // options...\r\n            itemSelector: '.' + this.mansonryItemSelectorClass,\r\n            columnWidth: this.columnWidth,\r\n            gutter: this.gutter,\r\n        });\r\n\r\n        const imageclass = this.getImageClass();\r\n\r\n        // add images to mansonry layout\r\n        this.images.forEach(image => {\r\n            // generate unique image id\r\n            const imageId = this.getImageId();\r\n\r\n            // create element\r\n            const imageElem = this.renderer.createElement('img');\r\n            imageElem.setAttribute('id', imageId);\r\n            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\r\n            imageElem.setAttribute('src', image.imageUrl);\r\n            // note - images are hidden by default and should be shown only after they are loaded\r\n            imageElem.setAttribute('style', `max-width: ${this.columnWidth}px; margin-bottom: ${this.gutter}px`);\r\n            imageElem.className = imageclass;\r\n            imageElem.addEventListener('load', () => {\r\n                this.handleImageLoad(imageId);\r\n            });\r\n            imageElem.addEventListener('click', () => {\r\n                this.handleClick(image);\r\n            });\r\n\r\n            // add to dom and mansory & refresh layout\r\n            this.grid.appendChild(imageElem);\r\n        });\r\n    }\r\n\r\n    private getImageClass(): string {\r\n        let className = this.hiddenClass + ' ' + this.mansonryItemSelectorClass;\r\n\r\n        if (this.imageClasses && this.imageClasses.length > 0) {\r\n            const customClass = this.imageClasses.join(' ');\r\n\r\n            className += ' ' + customClass;\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    private getImageId(): string {\r\n        return this.galleryGuid + `_` + utilities.newGuid();\r\n    }\r\n\r\n    private handleImageLoad(imageId: string): void {\r\n        // find loaded image\r\n        const image = document.getElementById(imageId);\r\n\r\n        if (!image) {\r\n            return;\r\n        }\r\n\r\n        // unhide image\r\n        image.classList.remove(this.hiddenClass);\r\n\r\n        // append image to masonry\r\n        this.msnry.appended(image);\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { MasonryGalleryComponent } from './masonry-gallery.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n    exports: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n})\r\nexport class MasonryGalleryModule { }\r\n","export class MasonryGalleryImage {\r\n\r\n    /**\r\n     * Url of the image\r\n     */\r\n    public imageUrl: string;\r\n\r\n    public alt?: string;\r\n\r\n    constructor(options: {\r\n        // required\r\n        imageUrl: string,\r\n\r\n        // optional\r\n        alt?: string,\r\n    }) {\r\n        Object.assign(this, options);\r\n    }\r\n}\r\n"],"names":["EventEmitter","Component","Renderer2","Input","Output","NgModule","CommonModule"],"mappings":"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"}
