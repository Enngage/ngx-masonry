{"version":3,"sources":["ng://ngx-masonry-gallery-lib/lib/utilities.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery.component.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery.module.ts","ng://ngx-masonry-gallery-lib/lib/masonry-gallery-models.ts"],"names":["utilities","Utilities","prototype","newGuid","replace","c","r","Math","random","toString","MasonryGalleryComponent","renderer","this","EventEmitter","ngOnChanges","viewReady","initMasonry","ngOnDestroy","msnry","destroy","handleClick","image","clickImage","next","ngAfterViewInit","grid","document","getElementById","galleryGuid","Error","masonry","itemSelector","mansonryItemSelectorClass","columnWidth","gutter","imageclass","getImageClass","images","forEach","imageId","_this","getImageId","imageElem","createElement","setAttribute","alt","imageUrl","className","addEventListener","handleImageLoad","appendChild","hiddenClass","imageClasses","length","join","classList","remove","appended","Component","args","selector","template","styles","Renderer2","Input","Output","MasonryGalleryModule","NgModule","imports","CommonModule","declarations","exports","MasonryGalleryImage","options","Object","assign"],"mappings":"yYAAA,IAUWA,EAAY,IAVvB,gCACIC,EAAAC,UAAAC,QAAA,WACG,MAAO,uCAAuCC,QAAQ,QAAS,SAAUC,GAErE,IAAMC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC/B,OAD2C,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACvDG,SAAS,SAL7B,ICAAC,EAAA,WAgCI,SAAAA,EACYC,GAAAC,KAAAD,SAAAA,cApB6B,oBACV,gBACL,oBACQ,mBAEX,IAAIE,EAAAA,8BAKWb,EAAUG,yCACH,6BACN,yBAKV,SAO7BO,EAAAR,UAAAY,YAAA,WACQF,KAAKG,WACLH,KAAKI,eAIbN,EAAAR,UAAAe,YAAA,WACQL,KAAKM,OACLN,KAAKM,MAAMC,WAInBT,EAAAR,UAAAkB,YAAA,SAAYC,GACRT,KAAKU,WAAWC,KAAKF,IAGzBX,EAAAR,UAAAsB,gBAAA,WACIZ,KAAKG,WAAY,EACjBH,KAAKI,eAGDN,EAAAR,UAAAc,kCAGJ,GAFAJ,KAAKa,KAAOC,SAASC,eAAef,KAAKgB,cAEpChB,KAAKa,KACN,MAAMI,MAAM,4DAA4DjB,KAAKgB,YAAW,KAG5FhB,KAAKM,MAAQ,IAAIY,EAAQlB,KAAKa,KAAM,CAEhCM,aAAc,IAAMnB,KAAKoB,0BACzBC,YAAarB,KAAKqB,YAClBC,OAAQtB,KAAKsB,SAGjB,IAAMC,EAAavB,KAAKwB,gBAGxBxB,KAAKyB,OAAOC,QAAQ,SAAAjB,GAEhB,IAAMkB,EAAUC,EAAKC,aAGfC,EAAYF,EAAK7B,SAASgC,cAAc,OAC9CD,EAAUE,aAAa,KAAML,GAC7BG,EAAUE,aAAa,MAAOvB,EAAMwB,IAAMxB,EAAMwB,IAAM,kBACtDH,EAAUE,aAAa,MAAOvB,EAAMyB,UAEpCJ,EAAUE,aAAa,QAAS,cAAcJ,EAAKP,YAAW,sBAAsBO,EAAKN,OAAM,MAC/FQ,EAAUK,UAAYZ,EACtBO,EAAUM,iBAAiB,OAAQ,WAC/BR,EAAKS,gBAAgBV,KAEzBG,EAAUM,iBAAiB,QAAS,WAChCR,EAAKpB,YAAYC,KAIrBmB,EAAKf,KAAKyB,YAAYR,MAItBhC,EAAAR,UAAAkC,yBACJ,IAAIW,EAAYnC,KAAKuC,YAAc,IAAMvC,KAAKoB,0BAE1CpB,KAAKwC,cAA2C,EAA3BxC,KAAKwC,aAAaC,SAGvCN,GAAa,IAFOnC,KAAKwC,aAAaE,KAAK,MAK/C,OAAOP,GAGHrC,EAAAR,UAAAuC,sBACJ,OAAO7B,KAAKgB,YAAc,IAAM5B,EAAUG,WAGtCO,EAAAR,UAAA+C,yBAAgBV,GAEpB,IAAMlB,EAAQK,SAASC,eAAeY,GAEjClB,IAKLA,EAAMkC,UAAUC,OAAO5C,KAAKuC,aAG5BvC,KAAKM,MAAMuC,SAASpC,yBAzH3BqC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,sBACVC,SAAU,iCACVC,OAAQ,CAAC,2EATyEC,EAAAA,6CAajFC,EAAAA,2BACAA,EAAAA,sBACAA,EAAAA,4BACAA,EAAAA,0BAEAC,EAAAA,YAlBL,GCAAC,EAAA,oDAKCC,EAAAA,SAAQR,KAAA,CAAC,CACNS,QAAS,CACLC,EAAAA,cAEJC,aAAc,CACV5D,GAEJ6D,QAAS,CACL7D,SAbR,GCAA8D,EASI,SAAYC,GAORC,OAAOC,OAAO/D,KAAM6D","sourcesContent":["export class Utilities {\r\n    newGuid() {\r\n       return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n           // tslint:disable-next-line:no-bitwise triple-equals\r\n           const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n           return v.toString(16);\r\n       });\r\n   }\r\n}\r\n\r\nexport let utilities = new Utilities();\r\n","import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnDestroy, Output, Renderer2 } from '@angular/core';\r\nimport * as masonry from 'masonry-layout';\r\n\r\nimport { MasonryGalleryImage } from './masonry-gallery-models';\r\nimport { utilities } from './utilities';\r\n\r\n@Component({\r\n    selector: 'ngx-masonry-gallery',\r\n    template: '<div [id]=\"galleryGuid\"></div>',\r\n    styles: ['.hidden { display: none; }']\r\n})\r\nexport class MasonryGalleryComponent implements AfterViewInit, OnDestroy, OnChanges {\r\n\r\n    @Input() images: MasonryGalleryImage[] = [];\r\n    @Input() columnWidth: number = 330;\r\n    @Input() gutter: number = 5;\r\n    @Input() imageClasses: string[] = [];\r\n\r\n    @Output() clickImage = new EventEmitter<MasonryGalleryImage>();\r\n\r\n    /**\r\n     * Unique gallery guid used for distinguishing between multiple galleries on page\r\n     */\r\n    public readonly galleryGuid: string = utilities.newGuid();\r\n    private readonly mansonryItemSelectorClass = 'grid-item';\r\n    private readonly hiddenClass: string = 'hidden';\r\n\r\n    private msnry?: any;\r\n    private grid?: any;\r\n\r\n    private viewReady: boolean = false;\r\n\r\n    constructor(\r\n        private renderer: Renderer2\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        if (this.viewReady) {\r\n            this.initMasonry();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.msnry) {\r\n            this.msnry.destroy();\r\n        }\r\n    }\r\n\r\n    handleClick(image: MasonryGalleryImage): void {\r\n        this.clickImage.next(image);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewReady = true;\r\n        this.initMasonry();\r\n    }\r\n\r\n    private initMasonry(): void {\r\n        this.grid = document.getElementById(this.galleryGuid);\r\n\r\n        if (!this.grid) {\r\n            throw Error(`Could not init mansory due to non existing elem with id '${this.galleryGuid}'`);\r\n        }\r\n\r\n        this.msnry = new masonry(this.grid, {\r\n            // options...\r\n            itemSelector: '.' + this.mansonryItemSelectorClass,\r\n            columnWidth: this.columnWidth,\r\n            gutter: this.gutter,\r\n        });\r\n\r\n        const imageclass = this.getImageClass();\r\n\r\n        // add images to mansonry layout\r\n        this.images.forEach(image => {\r\n            // generate unique image id\r\n            const imageId = this.getImageId();\r\n\r\n            // create element\r\n            const imageElem = this.renderer.createElement('img');\r\n            imageElem.setAttribute('id', imageId);\r\n            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\r\n            imageElem.setAttribute('src', image.imageUrl);\r\n            // note - images are hidden by default and should be shown only after they are loaded\r\n            imageElem.setAttribute('style', `max-width: ${this.columnWidth}px; margin-bottom: ${this.gutter}px`);\r\n            imageElem.className = imageclass;\r\n            imageElem.addEventListener('load', () => {\r\n                this.handleImageLoad(imageId);\r\n            });\r\n            imageElem.addEventListener('click', () => {\r\n                this.handleClick(image);\r\n            });\r\n\r\n            // add to dom and mansory & refresh layout\r\n            this.grid.appendChild(imageElem);\r\n        });\r\n    }\r\n\r\n    private getImageClass(): string {\r\n        let className = this.hiddenClass + ' ' + this.mansonryItemSelectorClass;\r\n\r\n        if (this.imageClasses && this.imageClasses.length > 0) {\r\n            const customClass = this.imageClasses.join(' ');\r\n\r\n            className += ' ' + customClass;\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    private getImageId(): string {\r\n        return this.galleryGuid + `_` + utilities.newGuid();\r\n    }\r\n\r\n    private handleImageLoad(imageId: string): void {\r\n        // find loaded image\r\n        const image = document.getElementById(imageId);\r\n\r\n        if (!image) {\r\n            return;\r\n        }\r\n\r\n        // unhide image\r\n        image.classList.remove(this.hiddenClass);\r\n\r\n        // append image to masonry\r\n        this.msnry.appended(image);\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { MasonryGalleryComponent } from './masonry-gallery.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n    exports: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n})\r\nexport class MasonryGalleryModule { }\r\n","export class MasonryGalleryImage {\r\n\r\n    /**\r\n     * Url of the image\r\n     */\r\n    public imageUrl: string;\r\n\r\n    public alt?: string;\r\n\r\n    constructor(options: {\r\n        // required\r\n        imageUrl: string,\r\n\r\n        // optional\r\n        alt?: string,\r\n    }) {\r\n        Object.assign(this, options);\r\n    }\r\n}\r\n"]}